/** Declaration file generated by dts-gen */

export class CookieJar {
    constructor(options: any);

    addCookie(cookie: any): void;

    getCookies(url: any): any;

    matchCookie(cookie: any, url: any): any;

    setCookie(cookie_str: any, url: any): void;

}

export class FetchStream {
    constructor(url: string, options: any);

    destroy(ex: any): void;

    drainBuffer(): void;

    normalizeOptions(): void;

    parseUrl(url: string): any;

    runStream(url: string): void;

    setEncoding(encoding: string): void;

}

export function fetchUrl(url: string, options: {
    maxRedirects: number, // how many redirects allowed, defaults to 10
    disableRedirects: boolean, // set to true if redirects are not allowed, defaults to false
    headers: any, // optional header fields, in the form of {'Header-Field':'value'}
    maxResponseLength: string, // maximum allowd length for the file, the remainder is cut off. Defaults to Infinity
    method: string, // defaults to GET
    payload: string, // request body
    disableGzip: boolean, // set to false, to disable content gzipping, needed for Node v0.5.9 which has buggy zlib
    cookies: array, // an array of cookie definitions in the form of ['name=val']
    cookieJar: CookieJar, // for sharing cookies between requests, see below
    outputEncoding: string, // valid for fetchUrl
    disableDecoding: string, // valid for fetchUrl, set to true to disable automatic charset decoding to utf-8
    overrideCharset: string, // valid for fetchUrl, set input encoding
    asyncDnsLoookup: string, // use high performance asyncronous DNS resolution based on c-ares instead of a thread pool calling getaddrinfo(3)
    timeout: number, // set a timeout in ms
    agentHttps: any, // pass-through http.request agent parameter for https
    agentHttp: any, // pass-through http.request agent parameter for http
    agent: any, // pass-through http.request agent parameter as fallback, if agentHttps or agentHttp are not specified
    rejectUnauthorized: boolean, // whether to reject self-signed certificates (true, default behavior), or ignore and allow them (false)
}, callback: Function): any;

